{"version":3,"file":"why520crazy-ngx-validator.js.map","sources":["ng://@why520crazy/ngx-validator/validator.class.ts","ng://@why520crazy/ngx-validator/strategies/noop-validation-feedback-strategy.ts","ng://@why520crazy/ngx-validator/strategies/bootstrap-validation-feedback-strategy.ts","ng://@why520crazy/ngx-validator/strategies/index.ts","ng://@why520crazy/ngx-validator/validator-loader.service.ts","ng://@why520crazy/ngx-validator/message-transformers.ts","ng://@why520crazy/ngx-validator/validator.service.ts","ng://@why520crazy/ngx-validator/directives/form-validator.directive.ts","ng://@why520crazy/ngx-validator/directives/form-submit.directive.ts","ng://@why520crazy/ngx-validator/validators.ts","ng://@why520crazy/ngx-validator/directives/validators.ts","ng://@why520crazy/ngx-validator/module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { ValidationFeedbackStrategy } from './strategies';\n\nexport interface Dictionary<T> {\n    [key: string]: T;\n}\n\nexport declare type NgxValidationMessages = Dictionary<Dictionary<string>>;\n\nexport declare type NgxValidateOn = 'submit' | 'blur';\n\nexport interface NgxValidatorConfig {\n    validationFeedbackStrategy?: ValidationFeedbackStrategy;\n    validationMessages?: NgxValidationMessages;\n    validateOn?: NgxValidateOn;\n}\nexport interface NgxValidatorGlobalConfig extends NgxValidatorConfig {\n    globalValidationMessages?: Dictionary<string>;\n}\n\nexport const NGX_VALIDATOR_CONFIG = new InjectionToken<NgxValidatorGlobalConfig>('NGX_VALIDATION_CONFIG');\n\nexport const DEFAULT_GLOBAL_VALIDATION_MESSAGES = {\n    required: 'è¯¥éé¡¹ä¸è½ä¸ºç©º',\n    maxlength: 'è¯¥éé¡¹è¾å¥å¼é¿åº¦ä¸è½å¤§äº{requiredLength}',\n    minlength: 'è¯¥éé¡¹è¾å¥å¼é¿åº¦ä¸è½å°äº{requiredLength}',\n    ngxUniqueCheck: 'è¾å¥å¼å·²ç»å­å¨ï¼è¯·éæ°è¾å¥',\n    email: 'è¾å¥é®ä»¶çæ ¼å¼ä¸æ­£ç¡®',\n    repeat: 'ä¸¤æ¬¡è¾å¥ä¸ä¸è´',\n    pattern: 'è¯¥éé¡¹è¾å¥æ ¼å¼ä¸æ­£ç¡®',\n    number: 'å¿é¡»è¾å¥æ°å­',\n    url: 'è¾å¥URLæ ¼å¼ä¸æ­£ç¡®',\n    max: 'è¯¥éé¡¹è¾å¥å¼ä¸è½å¤§äº{max}',\n    min: 'è¯¥éé¡¹è¾å¥å¼ä¸è½å°äº{min}'\n};\n","import { ValidationFeedbackStrategy } from './validation-feedback-strategy';\n\nexport class NoopValidationFeedbackStrategy implements ValidationFeedbackStrategy {\n    /** Does nothing, as this validation message display strategy is a no-op. */\n    showError(element: HTMLElement, errorMessages: string[]): void {}\n\n    removeError(element: HTMLElement): void {}\n}\n","import { ValidationFeedbackStrategy } from './validation-feedback-strategy';\n\nconst INVALID_CLASS = 'is-invalid';\nconst INVALID_FEEDBACK_CLASS = 'invalid-feedback';\n\nexport class BootstrapValidationFeedbackStrategy implements ValidationFeedbackStrategy {\n    constructor() {}\n\n    showError(element: HTMLElement, errorMessages: string[]): void {\n        if (element) {\n            element.classList.add(INVALID_CLASS);\n        }\n\n        if (element && element.parentElement) {\n            const documentFrag = document.createDocumentFragment();\n            const divNode = document.createElement('DIV');\n            const textNode = document.createTextNode(errorMessages[0]);\n            divNode.appendChild(textNode);\n            divNode.setAttribute('class', INVALID_FEEDBACK_CLASS);\n            documentFrag.appendChild(divNode);\n            element.parentElement.append(documentFrag);\n        }\n    }\n\n    removeError(element: HTMLElement): void {\n        if (element) {\n            element.classList.remove(INVALID_CLASS);\n        }\n        if (element && element.parentElement) {\n            const invalidFeedback = element.parentElement.querySelector(`.${INVALID_FEEDBACK_CLASS}`);\n            if (invalidFeedback) {\n                element.parentElement.removeChild(invalidFeedback);\n            }\n        }\n    }\n}\n","import { NoopValidationFeedbackStrategy } from './noop-validation-feedback-strategy';\nimport { BootstrapValidationFeedbackStrategy } from './bootstrap-validation-feedback-strategy';\nimport { ValidationFeedbackStrategy } from './validation-feedback-strategy';\n\nexport class ValidationFeedbackStrategyBuilder {\n    static noop(): ValidationFeedbackStrategy {\n        return new NoopValidationFeedbackStrategy();\n    }\n\n    static bootstrap(): ValidationFeedbackStrategy {\n        return new BootstrapValidationFeedbackStrategy();\n    }\n}\n\nexport { ValidationFeedbackStrategy, NoopValidationFeedbackStrategy, BootstrapValidationFeedbackStrategy };\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    NgxValidatorGlobalConfig,\n    NgxValidationMessages,\n    Dictionary,\n    NGX_VALIDATOR_CONFIG,\n    DEFAULT_GLOBAL_VALIDATION_MESSAGES\n} from './validator.class';\nimport { ValidationErrors } from '@angular/forms';\nimport { ValidationFeedbackStrategy, ValidationFeedbackStrategyBuilder } from './strategies';\n\nconst defaultValidatorConfig: NgxValidatorGlobalConfig = {\n    validationFeedbackStrategy: ValidationFeedbackStrategyBuilder.bootstrap(),\n    validationMessages: {}\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxValidatorLoader {\n    private config: NgxValidatorGlobalConfig;\n\n    private getDefaultValidationMessage(key: string) {\n        if (this.config.globalValidationMessages && this.config.globalValidationMessages[key]) {\n            return this.config.globalValidationMessages[key];\n        } else {\n            return DEFAULT_GLOBAL_VALIDATION_MESSAGES[key];\n        }\n    }\n\n    get validationMessages() {\n        return this.config.validationMessages;\n    }\n\n    get validationFeedbackStrategy(): ValidationFeedbackStrategy {\n        if (!this.config.validationFeedbackStrategy) {\n            this.config.validationFeedbackStrategy = ValidationFeedbackStrategyBuilder.bootstrap();\n        }\n        return this.config.validationFeedbackStrategy;\n    }\n\n    get validateOn () {\n        if (!this.config.validateOn) {\n            this.config.validateOn = 'submit';\n        }\n        return this.config.validateOn;\n    }\n\n    constructor(\n        @Optional()\n        @Inject(NGX_VALIDATOR_CONFIG)\n        config: NgxValidatorGlobalConfig\n    ) {\n        this.config = Object.assign({}, defaultValidatorConfig, config);\n    }\n\n    /**\n     * get validation error messages\n     * @param name formControl name, e.g. username or email\n     * @param key validator name, e.g. required or pattern\n     */\n    getErrorMessage(name: string, key: string, validationErrorValues?: any) {\n        let message = '';\n        if (this.validationMessages[name] && this.validationMessages[name][key]) {\n            message = this.validationMessages[name][key];\n        } else {\n            message = this.getDefaultValidationMessage(key);\n        }\n        return message;\n    }\n\n    // getErrorMessages(name: string, validationErrors: ValidationErrors) {\n    //     const messages = [];\n    //     for (const validationError in validationErrors) {\n    //         if (validationErrors.hasOwnProperty(validationError)) {\n    //             messages.push(this.getErrorMessage(name, validationError, validationErrors[validationError]));\n    //         }\n    //     }\n    //     return messages;\n    // }\n\n    addValidationMessages(messages: NgxValidationMessages) {\n        Object.assign(this.config.validationMessages, messages);\n    }\n\n    setGlobalValidationMessages(validationMessages: Dictionary<string>) {\n        this.config.globalValidationMessages = validationMessages;\n    }\n}\n","function maxOrMinLengthTransformer(message: string, validationErrorValues: { requiredLength: number }): string {\n    return message.replace(`{requiredLength}`, validationErrorValues.requiredLength.toString());\n}\n\nfunction maxTransformer(message: string, validationErrorValues: { max: number; actual: number }): string {\n    return message.replace(`{max}`, validationErrorValues.max.toString());\n}\n\nfunction minxTransformer(message: string, validationErrorValues: { min: number; actual: number }): string {\n    return message.replace(`{min}`, validationErrorValues.min.toString());\n}\n\nconst transformerMap = {\n    minlength: maxOrMinLengthTransformer,\n    maxlength: maxOrMinLengthTransformer,\n    max: maxTransformer,\n    min: minxTransformer\n};\n\nexport function transformMessage(validatorName: string, message: string, validationErrorValues: any) {\n    if (transformerMap[validatorName] && validationErrorValues) {\n        return transformerMap[validatorName](message, validationErrorValues);\n    }\n    return message;\n}\n","import { Injectable } from '@angular/core';\nimport {\n    NgForm,\n    AbstractControl,\n    ValidationErrors,\n    FormGroupDirective,\n    FormControlName,\n    NgControl\n} from '@angular/forms';\nimport { NgxValidatorLoader } from './validator-loader.service';\nimport { NgxValidatorConfig, Dictionary } from './validator.class';\nimport { transformMessage } from './message-transformers';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class NgxFormValidatorService {\n    private _ngForm: NgForm | FormGroupDirective;\n\n    private _formElement: HTMLElement;\n\n    private _config: NgxValidatorConfig;\n\n    private _controls: NgControl[] = [];\n\n    // public errors: string[];\n\n    // è®°å½ææåç´ çéªè¯ä¿¡æ¯\n    public validations: Dictionary<{\n        hasError?: boolean;\n        errorMessages?: string[];\n    }> = {};\n\n    private _getValidationFeedbackStrategy() {\n        const strategy =\n            (this._config && this._config.validationFeedbackStrategy) ||\n            this.thyFormValidateLoader.validationFeedbackStrategy;\n        if (!strategy) {\n            throw new Error(`validation display strategy is null`);\n        }\n        return strategy;\n    }\n\n    private _getElement(name: string) {\n        const element = this._formElement[name];\n        if (element) {\n            return element;\n        } else {\n            return this._formElement.querySelector(`[name='${name}']`);\n        }\n    }\n\n    private _clearElementError(name: string) {\n        if (this.validations[name] && this.validations[name].hasError) {\n            this.validations[name].hasError = false;\n            this.validations[name].errorMessages = [];\n            this._getValidationFeedbackStrategy().removeError(this._getElement(name));\n        }\n    }\n\n    _tryGetValidation(name: string) {\n        if (!this.validations[name]) {\n            this._initializeFormControlValidation(name, this._getControlByName(name));\n        }\n        return this.validations[name];\n    }\n\n    private _initializeFormControlValidation(name: string, control: AbstractControl | FormControlName | NgControl) {\n        this.validations[name] = {\n            hasError: false,\n            errorMessages: []\n        };\n        control.valueChanges.subscribe(() => {\n            this._clearElementError(name);\n        });\n    }\n\n    private _restFormControlValidation(name: string) {\n        const validation = this.validations[name];\n        if (validation) {\n            validation.hasError = false;\n            validation.errorMessages = [];\n        }\n    }\n\n    private _getValidationMessage(name: string, validationErrorName: string, validationErrorValues?: any) {\n        let message = '';\n        if (\n            this._config &&\n            this._config.validationMessages &&\n            this._config.validationMessages[name] &&\n            this._config.validationMessages[name][validationErrorName]\n        ) {\n            message = this._config.validationMessages[name][validationErrorName];\n        } else {\n            message = this.thyFormValidateLoader.getErrorMessage(name, validationErrorName, validationErrorValues);\n        }\n\n        return transformMessage(validationErrorName, message, validationErrorValues);\n    }\n\n    private _getValidationMessages(name: string, validationErrors: ValidationErrors) {\n        const messages = [];\n        for (const validationError in validationErrors) {\n            if (validationErrors.hasOwnProperty(validationError)) {\n                messages.push(this._getValidationMessage(name, validationError, validationErrors[validationError]));\n            }\n        }\n        return messages;\n    }\n\n    private _setControlValidationError(name: string, errorMessages: string[]) {\n        const validation = this._tryGetValidation(name);\n        validation.errorMessages = errorMessages;\n        validation.hasError = true;\n        this._getValidationFeedbackStrategy().showError(this._getElement(name), errorMessages);\n    }\n\n    get validatorConfig() {\n        return this._config;\n    }\n\n    constructor(private thyFormValidateLoader: NgxValidatorLoader) {}\n\n    initialize(ngForm: NgForm | FormGroupDirective, formElement: HTMLElement) {\n        this._ngForm = ngForm;\n        this._formElement = formElement;\n    }\n\n    initializeFormControlsValidation(controls: NgControl[]) {\n        if ((this._config && this._config.validateOn === 'blur') || this.thyFormValidateLoader.validateOn === 'blur') {\n            (controls || []).forEach((control: NgControl) => {\n                if (!this._controls.find(item => item.name === control.name)) {\n                    this._initializeFormControlValidation(control.name, control);\n                    const element: HTMLElement = this._getElement(control.name);\n                    if (element) {\n                        element.onblur = (event: FocusEvent) => {\n                            this.validateControl(control.name);\n                        };\n                    }\n                }\n            });\n            this._controls = controls;\n        }\n    }\n\n    setValidatorConfig(config: NgxValidatorConfig) {\n        this._config = config;\n    }\n\n    private _getControls() {\n        if (this._ngForm instanceof NgForm) {\n            return (this._ngForm as NgForm).controls;\n        } else if (this._ngForm instanceof FormGroupDirective) {\n            const controls = {};\n            (this._ngForm as FormGroupDirective).directives.forEach(directive => {\n                controls[directive.name] = directive;\n            });\n            return controls;\n        }\n    }\n\n    private _getControlByName(name: string): AbstractControl | FormControlName {\n        const controls = this._getControls();\n        return controls[name];\n    }\n\n    validateControl(name: string) {\n        this._clearElementError(name);\n        const control = this._getControlByName(name);\n        if (control && control.invalid) {\n            const errorMessages = this._getValidationMessages(name, control.errors);\n            this._setControlValidationError(name, errorMessages);\n        }\n    }\n\n    validateControls() {\n        // ä¸»è¦æ¯ æ æ³æ£æµå° ngForm ç controls çååï¼æèæ¯ææ²¡ææ¾å°\n        // éªè¯çæ¶åå¾ªç¯ ngForm ç controls éªè¯\n        // åç°æ²¡æ validation åå§åä¸ä¸ªï¼å·²ç»å­å¨ä¸ä¼éæ°åå§åï¼ä¿å­ç¼å­æ°æ®\n        const controls = this._getControls();\n        for (const name in controls) {\n            if (controls.hasOwnProperty(name)) {\n                this._tryGetValidation(name);\n                this.validateControl(name);\n            }\n        }\n        // ç§»é¤å·²ç»ä¸å­å¨ç validation\n        const names = Object.keys(this.validations);\n        names.forEach(name => {\n            if (!controls[name]) {\n                delete this.validations[name];\n            }\n        });\n    }\n\n    validate($event?: Event): boolean {\n        this._ngForm.onSubmit($event);\n        this.validateControls();\n        return this._ngForm.valid;\n    }\n\n    reset() {\n        this._ngForm.reset();\n        for (const name in this.validations) {\n            if (this.validations.hasOwnProperty(name)) {\n                this._restFormControlValidation(name);\n                this._clearElementError(name);\n            }\n        }\n    }\n\n    markControlAsError(name: string, message: string) {\n        this._clearElementError(name);\n        this._setControlValidationError(name, [message]);\n    }\n}\n","import {\n    Directive,\n    OnInit,\n    NgZone,\n    Renderer2,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ContentChildren,\n    AfterContentInit,\n    QueryList\n} from '@angular/core';\nimport { NgxFormValidatorService } from '../validator.service';\nimport { NgForm, ControlContainer, NgControl } from '@angular/forms';\nimport { NgxValidatorConfig } from '../validator.class';\n\nconst KEY_CODES_ENTER = 13;\n\n// 1. submit æ Enter é®æäº¤, Textare é¤å¤ï¼éè¦æ Ctrl | Command + Enter æäº¤\n// 2. alwaysSubmit ä¸ç®¡æ¯åªä¸ªåç´  æ Enter é®é½æäº¤\n// 3. forbidSubmit \bEnter é®ç¦æ­¢æäº¤\n// é»è®¤ submit\nexport enum NgxEnterKeyMode {\n    submit = 'submit',\n    alwaysSubmit = 'alwaysSubmit',\n    forbidSubmit = 'forbidSubmit'\n}\n\n@Directive({\n    selector: 'form[ngxFormValidator],form[ngx-form-validator]',\n    providers: [NgxFormValidatorService],\n    exportAs: 'ngxFormValidator'\n})\nexport class NgxFormValidatorDirective implements OnInit, AfterContentInit, OnDestroy {\n    @ContentChildren(NgControl, {\n        descendants: true\n    })\n    public controls: QueryList<NgControl>;\n\n    private unsubscribe: () => void;\n\n    onSubmitSuccess: ($event: any) => void;\n\n    @Input() enterKeyMode: NgxEnterKeyMode;\n\n    @Input()\n    set ngxFormValidatorConfig(config: NgxValidatorConfig) {\n        this.validator.setValidatorConfig(config);\n    }\n\n    @Input()\n    set ngxFormValidator(config: NgxValidatorConfig) {\n        this.validator.setValidatorConfig(config);\n    }\n\n    get validator() {\n        return this._validator;\n    }\n\n    constructor(\n        private ngZone: NgZone,\n        private renderer: Renderer2,\n        private elementRef: ElementRef,\n        private _validator: NgxFormValidatorService,\n        private ngForm: ControlContainer\n    ) {}\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.unsubscribe = this.renderer.listen(\n                this.elementRef.nativeElement,\n                'keydown',\n                this.onKeydown.bind(this)\n            );\n        });\n\n        this.validator.initialize(this.ngForm as NgForm, this.elementRef.nativeElement);\n    }\n\n    ngAfterContentInit() {\n        this.validator.initializeFormControlsValidation(this.controls.toArray());\n        this.controls.changes.subscribe(controls => {\n            this.validator.initializeFormControlsValidation(this.controls.toArray());\n        });\n    }\n\n    submit($event: Event) {\n        if (this.validator.validate($event) && this.onSubmitSuccess) {\n            this.onSubmitSuccess($event);\n        }\n    }\n\n    submitRunInZone($event: Event) {\n        this.ngZone.run(() => {\n            this.submit($event);\n        });\n    }\n\n    onKeydown($event: KeyboardEvent) {\n        const currentInput = document.activeElement;\n        const key = $event.which || $event.keyCode;\n        if (key === KEY_CODES_ENTER && currentInput.tagName) {\n            if (!this.enterKeyMode || this.enterKeyMode === NgxEnterKeyMode.submit) {\n                // TEXTAREA Ctrl + Enter æè Command + Enter é»æ­¢\bé»è®¤è¡ä¸ºå¹¶æäº¤\n                if (currentInput.tagName === 'TEXTAREA') {\n                    if ($event.ctrlKey || $event.metaKey) {\n                        $event.preventDefault();\n                        this.submitRunInZone($event);\n                    }\n                } else {\n                    // ä¸æ¯ TEXTAREA Enter é»æ­¢\bé»è®¤è¡ä¸ºå¹¶æäº¤\n                    $event.preventDefault();\n                    this.submitRunInZone($event);\n                }\n            } else if (this.enterKeyMode === NgxEnterKeyMode.alwaysSubmit) {\n                $event.preventDefault();\n                this.submitRunInZone($event);\n            } else {\n                // do nothing\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n    }\n}\n","import { Directive, ElementRef, Output, OnInit, HostBinding, HostListener, Optional, EventEmitter } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { NgxFormValidatorDirective } from './form-validator.directive';\n\n@Directive({\n    selector: '[ngxFormSubmit],[ngx-form-submit]'\n})\nexport class NgxFormSubmitDirective implements OnInit {\n\n    @Output() ngxFormSubmit = new EventEmitter();\n\n    constructor(\n        private validatorDirective: NgxFormValidatorDirective\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.validatorDirective.onSubmitSuccess = ($event: any) => {\n            this.ngxFormSubmit.emit($event);\n        };\n    }\n\n    @HostListener('click', ['$event'])\n    onSubmit($event: any) {\n        this.validatorDirective.submit($event);\n    }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { of, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class NgxValidators {\n    static uniqueCheckValidator(uniqueCheckFn: (value: any) => Observable<boolean>) {\n        const result = (\n            control: AbstractControl\n        ): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\n            if (control.value) {\n                return uniqueCheckFn(control.value).pipe(\n                    map(isUnique => {\n                        return isUnique ? { ngxUniqueCheck: { value: true } } : null;\n                    })\n                );\n            } else {\n                return of(null);\n            }\n        };\n        return result;\n    }\n}\n","import { Directive, forwardRef, Attribute, Injectable, ElementRef, Input } from '@angular/core';\nimport {\n    NG_VALIDATORS,\n    Validator,\n    AbstractControl,\n    Validators,\n    ValidatorFn,\n    NG_ASYNC_VALIDATORS,\n    AsyncValidator,\n    ValidationErrors\n} from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { NgxValidators } from '../validators';\n\n@Directive({\n    selector:\n        '[ngxMin][formControlName],[ngxMin][formControl],[ngxMin][ngModel],',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MinValidatorDirective),\n            multi: true\n        }\n    ]\n})\nexport class MinValidatorDirective implements Validator {\n    private validator: ValidatorFn;\n\n    @Input() public set ngxMin(value: string) {\n        this.validator = Validators.min(parseFloat(value));\n    }\n\n    constructor() {}\n\n    validate(control: AbstractControl) {\n        return this.validator(control);\n    }\n}\n\n@Directive({\n    selector:\n        '[ngxMax][formControlName],[ngxMax][formControl],[ngxMax][ngModel]',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaxValidatorDirective),\n            multi: true\n        }\n    ]\n})\nexport class MaxValidatorDirective implements Validator {\n    private validator: ValidatorFn;\n\n    @Input() public set ngxMax(value: string) {\n        this.validator = Validators.max(parseFloat(value));\n    }\n\n    constructor() {}\n\n    validate(control: AbstractControl) {\n        return this.validator(control);\n    }\n}\n\n@Directive({\n    selector: '[ngxUniqueCheck][formControlName],[ngxUniqueCheck][formControl],[ngxUniqueCheck][ngModel]',\n    providers: [\n        {\n            provide: NG_ASYNC_VALIDATORS,\n            useExisting: NgxUniqueCheckDirective,\n            multi: true\n        }\n    ]\n})\nexport class NgxUniqueCheckDirective implements AsyncValidator {\n    @Input() ngxUniqueCheck: (value: any) => Observable<boolean | null> = (value: any) => of(null);\n\n    constructor() {}\n\n    validate(control: AbstractControl): Promise<ValidationErrors> | Observable<ValidationErrors> {\n        return NgxValidators.uniqueCheckValidator(this.ngxUniqueCheck)(control);\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgxFormValidatorDirective } from './directives/form-validator.directive';\nimport { NgxFormSubmitDirective } from './directives/form-submit.directive';\n\n// import { NgxUniqueCheckDirective } from './directives/form-unique-check.directive';\nimport { MaxValidatorDirective, MinValidatorDirective, NgxUniqueCheckDirective } from './directives/validators';\n\nimport { NgxValidatorGlobalConfig, NGX_VALIDATOR_CONFIG } from './validator.class';\n\nconst declarations = [\n    NgxFormValidatorDirective,\n    NgxFormSubmitDirective,\n    NgxUniqueCheckDirective,\n    MaxValidatorDirective,\n    MinValidatorDirective\n];\n\n@NgModule({\n    declarations: declarations,\n    imports: [FormsModule],\n    exports: [...declarations, FormsModule]\n})\nexport class NgxValidatorModule {\n    static forRoot(config: NgxValidatorGlobalConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxValidatorModule,\n            providers: [\n                {\n                    provide: NGX_VALIDATOR_CONFIG,\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\n"],"names":[],"mappings":"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"}
