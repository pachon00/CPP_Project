{"version":3,"file":"why520crazy-ngx-validator.umd.js.map","sources":["node_modules/tslib/tslib.es6.js","ng://@why520crazy/ngx-validator/validator.class.ts","ng://@why520crazy/ngx-validator/strategies/noop-validation-feedback-strategy.ts","ng://@why520crazy/ngx-validator/strategies/bootstrap-validation-feedback-strategy.ts","ng://@why520crazy/ngx-validator/strategies/index.ts","ng://@why520crazy/ngx-validator/validator-loader.service.ts","ng://@why520crazy/ngx-validator/message-transformers.ts","ng://@why520crazy/ngx-validator/validator.service.ts","ng://@why520crazy/ngx-validator/directives/form-validator.directive.ts","ng://@why520crazy/ngx-validator/directives/form-submit.directive.ts","ng://@why520crazy/ngx-validator/validators.ts","ng://@why520crazy/ngx-validator/directives/validators.ts","ng://@why520crazy/ngx-validator/module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\nimport { ValidationFeedbackStrategy } from './strategies';\n\nexport interface Dictionary<T> {\n    [key: string]: T;\n}\n\nexport declare type NgxValidationMessages = Dictionary<Dictionary<string>>;\n\nexport declare type NgxValidateOn = 'submit' | 'blur';\n\nexport interface NgxValidatorConfig {\n    validationFeedbackStrategy?: ValidationFeedbackStrategy;\n    validationMessages?: NgxValidationMessages;\n    validateOn?: NgxValidateOn;\n}\nexport interface NgxValidatorGlobalConfig extends NgxValidatorConfig {\n    globalValidationMessages?: Dictionary<string>;\n}\n\nexport const NGX_VALIDATOR_CONFIG = new InjectionToken<NgxValidatorGlobalConfig>('NGX_VALIDATION_CONFIG');\n\nexport const DEFAULT_GLOBAL_VALIDATION_MESSAGES = {\n    required: 'è¯¥éé¡¹ä¸è½ä¸ºç©º',\n    maxlength: 'è¯¥éé¡¹è¾å¥å¼é¿åº¦ä¸è½å¤§äº{requiredLength}',\n    minlength: 'è¯¥éé¡¹è¾å¥å¼é¿åº¦ä¸è½å°äº{requiredLength}',\n    ngxUniqueCheck: 'è¾å¥å¼å·²ç»å­å¨ï¼è¯·éæ°è¾å¥',\n    email: 'è¾å¥é®ä»¶çæ ¼å¼ä¸æ­£ç¡®',\n    repeat: 'ä¸¤æ¬¡è¾å¥ä¸ä¸è´',\n    pattern: 'è¯¥éé¡¹è¾å¥æ ¼å¼ä¸æ­£ç¡®',\n    number: 'å¿é¡»è¾å¥æ°å­',\n    url: 'è¾å¥URLæ ¼å¼ä¸æ­£ç¡®',\n    max: 'è¯¥éé¡¹è¾å¥å¼ä¸è½å¤§äº{max}',\n    min: 'è¯¥éé¡¹è¾å¥å¼ä¸è½å°äº{min}'\n};\n","import { ValidationFeedbackStrategy } from './validation-feedback-strategy';\n\nexport class NoopValidationFeedbackStrategy implements ValidationFeedbackStrategy {\n    /** Does nothing, as this validation message display strategy is a no-op. */\n    showError(element: HTMLElement, errorMessages: string[]): void {}\n\n    removeError(element: HTMLElement): void {}\n}\n","import { ValidationFeedbackStrategy } from './validation-feedback-strategy';\n\nconst INVALID_CLASS = 'is-invalid';\nconst INVALID_FEEDBACK_CLASS = 'invalid-feedback';\n\nexport class BootstrapValidationFeedbackStrategy implements ValidationFeedbackStrategy {\n    constructor() {}\n\n    showError(element: HTMLElement, errorMessages: string[]): void {\n        if (element) {\n            element.classList.add(INVALID_CLASS);\n        }\n\n        if (element && element.parentElement) {\n            const documentFrag = document.createDocumentFragment();\n            const divNode = document.createElement('DIV');\n            const textNode = document.createTextNode(errorMessages[0]);\n            divNode.appendChild(textNode);\n            divNode.setAttribute('class', INVALID_FEEDBACK_CLASS);\n            documentFrag.appendChild(divNode);\n            element.parentElement.append(documentFrag);\n        }\n    }\n\n    removeError(element: HTMLElement): void {\n        if (element) {\n            element.classList.remove(INVALID_CLASS);\n        }\n        if (element && element.parentElement) {\n            const invalidFeedback = element.parentElement.querySelector(`.${INVALID_FEEDBACK_CLASS}`);\n            if (invalidFeedback) {\n                element.parentElement.removeChild(invalidFeedback);\n            }\n        }\n    }\n}\n","import { NoopValidationFeedbackStrategy } from './noop-validation-feedback-strategy';\nimport { BootstrapValidationFeedbackStrategy } from './bootstrap-validation-feedback-strategy';\nimport { ValidationFeedbackStrategy } from './validation-feedback-strategy';\n\nexport class ValidationFeedbackStrategyBuilder {\n    static noop(): ValidationFeedbackStrategy {\n        return new NoopValidationFeedbackStrategy();\n    }\n\n    static bootstrap(): ValidationFeedbackStrategy {\n        return new BootstrapValidationFeedbackStrategy();\n    }\n}\n\nexport { ValidationFeedbackStrategy, NoopValidationFeedbackStrategy, BootstrapValidationFeedbackStrategy };\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport {\n    NgxValidatorGlobalConfig,\n    NgxValidationMessages,\n    Dictionary,\n    NGX_VALIDATOR_CONFIG,\n    DEFAULT_GLOBAL_VALIDATION_MESSAGES\n} from './validator.class';\nimport { ValidationErrors } from '@angular/forms';\nimport { ValidationFeedbackStrategy, ValidationFeedbackStrategyBuilder } from './strategies';\n\nconst defaultValidatorConfig: NgxValidatorGlobalConfig = {\n    validationFeedbackStrategy: ValidationFeedbackStrategyBuilder.bootstrap(),\n    validationMessages: {}\n};\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NgxValidatorLoader {\n    private config: NgxValidatorGlobalConfig;\n\n    private getDefaultValidationMessage(key: string) {\n        if (this.config.globalValidationMessages && this.config.globalValidationMessages[key]) {\n            return this.config.globalValidationMessages[key];\n        } else {\n            return DEFAULT_GLOBAL_VALIDATION_MESSAGES[key];\n        }\n    }\n\n    get validationMessages() {\n        return this.config.validationMessages;\n    }\n\n    get validationFeedbackStrategy(): ValidationFeedbackStrategy {\n        if (!this.config.validationFeedbackStrategy) {\n            this.config.validationFeedbackStrategy = ValidationFeedbackStrategyBuilder.bootstrap();\n        }\n        return this.config.validationFeedbackStrategy;\n    }\n\n    get validateOn () {\n        if (!this.config.validateOn) {\n            this.config.validateOn = 'submit';\n        }\n        return this.config.validateOn;\n    }\n\n    constructor(\n        @Optional()\n        @Inject(NGX_VALIDATOR_CONFIG)\n        config: NgxValidatorGlobalConfig\n    ) {\n        this.config = Object.assign({}, defaultValidatorConfig, config);\n    }\n\n    /**\n     * get validation error messages\n     * @param name formControl name, e.g. username or email\n     * @param key validator name, e.g. required or pattern\n     */\n    getErrorMessage(name: string, key: string, validationErrorValues?: any) {\n        let message = '';\n        if (this.validationMessages[name] && this.validationMessages[name][key]) {\n            message = this.validationMessages[name][key];\n        } else {\n            message = this.getDefaultValidationMessage(key);\n        }\n        return message;\n    }\n\n    // getErrorMessages(name: string, validationErrors: ValidationErrors) {\n    //     const messages = [];\n    //     for (const validationError in validationErrors) {\n    //         if (validationErrors.hasOwnProperty(validationError)) {\n    //             messages.push(this.getErrorMessage(name, validationError, validationErrors[validationError]));\n    //         }\n    //     }\n    //     return messages;\n    // }\n\n    addValidationMessages(messages: NgxValidationMessages) {\n        Object.assign(this.config.validationMessages, messages);\n    }\n\n    setGlobalValidationMessages(validationMessages: Dictionary<string>) {\n        this.config.globalValidationMessages = validationMessages;\n    }\n}\n","function maxOrMinLengthTransformer(message: string, validationErrorValues: { requiredLength: number }): string {\n    return message.replace(`{requiredLength}`, validationErrorValues.requiredLength.toString());\n}\n\nfunction maxTransformer(message: string, validationErrorValues: { max: number; actual: number }): string {\n    return message.replace(`{max}`, validationErrorValues.max.toString());\n}\n\nfunction minxTransformer(message: string, validationErrorValues: { min: number; actual: number }): string {\n    return message.replace(`{min}`, validationErrorValues.min.toString());\n}\n\nconst transformerMap = {\n    minlength: maxOrMinLengthTransformer,\n    maxlength: maxOrMinLengthTransformer,\n    max: maxTransformer,\n    min: minxTransformer\n};\n\nexport function transformMessage(validatorName: string, message: string, validationErrorValues: any) {\n    if (transformerMap[validatorName] && validationErrorValues) {\n        return transformerMap[validatorName](message, validationErrorValues);\n    }\n    return message;\n}\n","import { Injectable } from '@angular/core';\nimport {\n    NgForm,\n    AbstractControl,\n    ValidationErrors,\n    FormGroupDirective,\n    FormControlName,\n    NgControl\n} from '@angular/forms';\nimport { NgxValidatorLoader } from './validator-loader.service';\nimport { NgxValidatorConfig, Dictionary } from './validator.class';\nimport { transformMessage } from './message-transformers';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class NgxFormValidatorService {\n    private _ngForm: NgForm | FormGroupDirective;\n\n    private _formElement: HTMLElement;\n\n    private _config: NgxValidatorConfig;\n\n    private _controls: NgControl[] = [];\n\n    // public errors: string[];\n\n    // è®°å½ææåç´ çéªè¯ä¿¡æ¯\n    public validations: Dictionary<{\n        hasError?: boolean;\n        errorMessages?: string[];\n    }> = {};\n\n    private _getValidationFeedbackStrategy() {\n        const strategy =\n            (this._config && this._config.validationFeedbackStrategy) ||\n            this.thyFormValidateLoader.validationFeedbackStrategy;\n        if (!strategy) {\n            throw new Error(`validation display strategy is null`);\n        }\n        return strategy;\n    }\n\n    private _getElement(name: string) {\n        const element = this._formElement[name];\n        if (element) {\n            return element;\n        } else {\n            return this._formElement.querySelector(`[name='${name}']`);\n        }\n    }\n\n    private _clearElementError(name: string) {\n        if (this.validations[name] && this.validations[name].hasError) {\n            this.validations[name].hasError = false;\n            this.validations[name].errorMessages = [];\n            this._getValidationFeedbackStrategy().removeError(this._getElement(name));\n        }\n    }\n\n    _tryGetValidation(name: string) {\n        if (!this.validations[name]) {\n            this._initializeFormControlValidation(name, this._getControlByName(name));\n        }\n        return this.validations[name];\n    }\n\n    private _initializeFormControlValidation(name: string, control: AbstractControl | FormControlName | NgControl) {\n        this.validations[name] = {\n            hasError: false,\n            errorMessages: []\n        };\n        control.valueChanges.subscribe(() => {\n            this._clearElementError(name);\n        });\n    }\n\n    private _restFormControlValidation(name: string) {\n        const validation = this.validations[name];\n        if (validation) {\n            validation.hasError = false;\n            validation.errorMessages = [];\n        }\n    }\n\n    private _getValidationMessage(name: string, validationErrorName: string, validationErrorValues?: any) {\n        let message = '';\n        if (\n            this._config &&\n            this._config.validationMessages &&\n            this._config.validationMessages[name] &&\n            this._config.validationMessages[name][validationErrorName]\n        ) {\n            message = this._config.validationMessages[name][validationErrorName];\n        } else {\n            message = this.thyFormValidateLoader.getErrorMessage(name, validationErrorName, validationErrorValues);\n        }\n\n        return transformMessage(validationErrorName, message, validationErrorValues);\n    }\n\n    private _getValidationMessages(name: string, validationErrors: ValidationErrors) {\n        const messages = [];\n        for (const validationError in validationErrors) {\n            if (validationErrors.hasOwnProperty(validationError)) {\n                messages.push(this._getValidationMessage(name, validationError, validationErrors[validationError]));\n            }\n        }\n        return messages;\n    }\n\n    private _setControlValidationError(name: string, errorMessages: string[]) {\n        const validation = this._tryGetValidation(name);\n        validation.errorMessages = errorMessages;\n        validation.hasError = true;\n        this._getValidationFeedbackStrategy().showError(this._getElement(name), errorMessages);\n    }\n\n    get validatorConfig() {\n        return this._config;\n    }\n\n    constructor(private thyFormValidateLoader: NgxValidatorLoader) {}\n\n    initialize(ngForm: NgForm | FormGroupDirective, formElement: HTMLElement) {\n        this._ngForm = ngForm;\n        this._formElement = formElement;\n    }\n\n    initializeFormControlsValidation(controls: NgControl[]) {\n        if ((this._config && this._config.validateOn === 'blur') || this.thyFormValidateLoader.validateOn === 'blur') {\n            (controls || []).forEach((control: NgControl) => {\n                if (!this._controls.find(item => item.name === control.name)) {\n                    this._initializeFormControlValidation(control.name, control);\n                    const element: HTMLElement = this._getElement(control.name);\n                    if (element) {\n                        element.onblur = (event: FocusEvent) => {\n                            this.validateControl(control.name);\n                        };\n                    }\n                }\n            });\n            this._controls = controls;\n        }\n    }\n\n    setValidatorConfig(config: NgxValidatorConfig) {\n        this._config = config;\n    }\n\n    private _getControls() {\n        if (this._ngForm instanceof NgForm) {\n            return (this._ngForm as NgForm).controls;\n        } else if (this._ngForm instanceof FormGroupDirective) {\n            const controls = {};\n            (this._ngForm as FormGroupDirective).directives.forEach(directive => {\n                controls[directive.name] = directive;\n            });\n            return controls;\n        }\n    }\n\n    private _getControlByName(name: string): AbstractControl | FormControlName {\n        const controls = this._getControls();\n        return controls[name];\n    }\n\n    validateControl(name: string) {\n        this._clearElementError(name);\n        const control = this._getControlByName(name);\n        if (control && control.invalid) {\n            const errorMessages = this._getValidationMessages(name, control.errors);\n            this._setControlValidationError(name, errorMessages);\n        }\n    }\n\n    validateControls() {\n        // ä¸»è¦æ¯ æ æ³æ£æµå° ngForm ç controls çååï¼æèæ¯ææ²¡ææ¾å°\n        // éªè¯çæ¶åå¾ªç¯ ngForm ç controls éªè¯\n        // åç°æ²¡æ validation åå§åä¸ä¸ªï¼å·²ç»å­å¨ä¸ä¼éæ°åå§åï¼ä¿å­ç¼å­æ°æ®\n        const controls = this._getControls();\n        for (const name in controls) {\n            if (controls.hasOwnProperty(name)) {\n                this._tryGetValidation(name);\n                this.validateControl(name);\n            }\n        }\n        // ç§»é¤å·²ç»ä¸å­å¨ç validation\n        const names = Object.keys(this.validations);\n        names.forEach(name => {\n            if (!controls[name]) {\n                delete this.validations[name];\n            }\n        });\n    }\n\n    validate($event?: Event): boolean {\n        this._ngForm.onSubmit($event);\n        this.validateControls();\n        return this._ngForm.valid;\n    }\n\n    reset() {\n        this._ngForm.reset();\n        for (const name in this.validations) {\n            if (this.validations.hasOwnProperty(name)) {\n                this._restFormControlValidation(name);\n                this._clearElementError(name);\n            }\n        }\n    }\n\n    markControlAsError(name: string, message: string) {\n        this._clearElementError(name);\n        this._setControlValidationError(name, [message]);\n    }\n}\n","import {\n    Directive,\n    OnInit,\n    NgZone,\n    Renderer2,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ContentChildren,\n    AfterContentInit,\n    QueryList\n} from '@angular/core';\nimport { NgxFormValidatorService } from '../validator.service';\nimport { NgForm, ControlContainer, NgControl } from '@angular/forms';\nimport { NgxValidatorConfig } from '../validator.class';\n\nconst KEY_CODES_ENTER = 13;\n\n// 1. submit æ Enter é®æäº¤, Textare é¤å¤ï¼éè¦æ Ctrl | Command + Enter æäº¤\n// 2. alwaysSubmit ä¸ç®¡æ¯åªä¸ªåç´  æ Enter é®é½æäº¤\n// 3. forbidSubmit \bEnter é®ç¦æ­¢æäº¤\n// é»è®¤ submit\nexport enum NgxEnterKeyMode {\n    submit = 'submit',\n    alwaysSubmit = 'alwaysSubmit',\n    forbidSubmit = 'forbidSubmit'\n}\n\n@Directive({\n    selector: 'form[ngxFormValidator],form[ngx-form-validator]',\n    providers: [NgxFormValidatorService],\n    exportAs: 'ngxFormValidator'\n})\nexport class NgxFormValidatorDirective implements OnInit, AfterContentInit, OnDestroy {\n    @ContentChildren(NgControl, {\n        descendants: true\n    })\n    public controls: QueryList<NgControl>;\n\n    private unsubscribe: () => void;\n\n    onSubmitSuccess: ($event: any) => void;\n\n    @Input() enterKeyMode: NgxEnterKeyMode;\n\n    @Input()\n    set ngxFormValidatorConfig(config: NgxValidatorConfig) {\n        this.validator.setValidatorConfig(config);\n    }\n\n    @Input()\n    set ngxFormValidator(config: NgxValidatorConfig) {\n        this.validator.setValidatorConfig(config);\n    }\n\n    get validator() {\n        return this._validator;\n    }\n\n    constructor(\n        private ngZone: NgZone,\n        private renderer: Renderer2,\n        private elementRef: ElementRef,\n        private _validator: NgxFormValidatorService,\n        private ngForm: ControlContainer\n    ) {}\n\n    ngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.unsubscribe = this.renderer.listen(\n                this.elementRef.nativeElement,\n                'keydown',\n                this.onKeydown.bind(this)\n            );\n        });\n\n        this.validator.initialize(this.ngForm as NgForm, this.elementRef.nativeElement);\n    }\n\n    ngAfterContentInit() {\n        this.validator.initializeFormControlsValidation(this.controls.toArray());\n        this.controls.changes.subscribe(controls => {\n            this.validator.initializeFormControlsValidation(this.controls.toArray());\n        });\n    }\n\n    submit($event: Event) {\n        if (this.validator.validate($event) && this.onSubmitSuccess) {\n            this.onSubmitSuccess($event);\n        }\n    }\n\n    submitRunInZone($event: Event) {\n        this.ngZone.run(() => {\n            this.submit($event);\n        });\n    }\n\n    onKeydown($event: KeyboardEvent) {\n        const currentInput = document.activeElement;\n        const key = $event.which || $event.keyCode;\n        if (key === KEY_CODES_ENTER && currentInput.tagName) {\n            if (!this.enterKeyMode || this.enterKeyMode === NgxEnterKeyMode.submit) {\n                // TEXTAREA Ctrl + Enter æè Command + Enter é»æ­¢\bé»è®¤è¡ä¸ºå¹¶æäº¤\n                if (currentInput.tagName === 'TEXTAREA') {\n                    if ($event.ctrlKey || $event.metaKey) {\n                        $event.preventDefault();\n                        this.submitRunInZone($event);\n                    }\n                } else {\n                    // ä¸æ¯ TEXTAREA Enter é»æ­¢\bé»è®¤è¡ä¸ºå¹¶æäº¤\n                    $event.preventDefault();\n                    this.submitRunInZone($event);\n                }\n            } else if (this.enterKeyMode === NgxEnterKeyMode.alwaysSubmit) {\n                $event.preventDefault();\n                this.submitRunInZone($event);\n            } else {\n                // do nothing\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n        }\n    }\n}\n","import { Directive, ElementRef, Output, OnInit, HostBinding, HostListener, Optional, EventEmitter } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { NgxFormValidatorDirective } from './form-validator.directive';\n\n@Directive({\n    selector: '[ngxFormSubmit],[ngx-form-submit]'\n})\nexport class NgxFormSubmitDirective implements OnInit {\n\n    @Output() ngxFormSubmit = new EventEmitter();\n\n    constructor(\n        private validatorDirective: NgxFormValidatorDirective\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.validatorDirective.onSubmitSuccess = ($event: any) => {\n            this.ngxFormSubmit.emit($event);\n        };\n    }\n\n    @HostListener('click', ['$event'])\n    onSubmit($event: any) {\n        this.validatorDirective.submit($event);\n    }\n}\n","import { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { of, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class NgxValidators {\n    static uniqueCheckValidator(uniqueCheckFn: (value: any) => Observable<boolean>) {\n        const result = (\n            control: AbstractControl\n        ): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\n            if (control.value) {\n                return uniqueCheckFn(control.value).pipe(\n                    map(isUnique => {\n                        return isUnique ? { ngxUniqueCheck: { value: true } } : null;\n                    })\n                );\n            } else {\n                return of(null);\n            }\n        };\n        return result;\n    }\n}\n","import { Directive, forwardRef, Attribute, Injectable, ElementRef, Input } from '@angular/core';\nimport {\n    NG_VALIDATORS,\n    Validator,\n    AbstractControl,\n    Validators,\n    ValidatorFn,\n    NG_ASYNC_VALIDATORS,\n    AsyncValidator,\n    ValidationErrors\n} from '@angular/forms';\nimport { Observable, of } from 'rxjs';\nimport { NgxValidators } from '../validators';\n\n@Directive({\n    selector:\n        '[ngxMin][formControlName],[ngxMin][formControl],[ngxMin][ngModel],',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MinValidatorDirective),\n            multi: true\n        }\n    ]\n})\nexport class MinValidatorDirective implements Validator {\n    private validator: ValidatorFn;\n\n    @Input() public set ngxMin(value: string) {\n        this.validator = Validators.min(parseFloat(value));\n    }\n\n    constructor() {}\n\n    validate(control: AbstractControl) {\n        return this.validator(control);\n    }\n}\n\n@Directive({\n    selector:\n        '[ngxMax][formControlName],[ngxMax][formControl],[ngxMax][ngModel]',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaxValidatorDirective),\n            multi: true\n        }\n    ]\n})\nexport class MaxValidatorDirective implements Validator {\n    private validator: ValidatorFn;\n\n    @Input() public set ngxMax(value: string) {\n        this.validator = Validators.max(parseFloat(value));\n    }\n\n    constructor() {}\n\n    validate(control: AbstractControl) {\n        return this.validator(control);\n    }\n}\n\n@Directive({\n    selector: '[ngxUniqueCheck][formControlName],[ngxUniqueCheck][formControl],[ngxUniqueCheck][ngModel]',\n    providers: [\n        {\n            provide: NG_ASYNC_VALIDATORS,\n            useExisting: NgxUniqueCheckDirective,\n            multi: true\n        }\n    ]\n})\nexport class NgxUniqueCheckDirective implements AsyncValidator {\n    @Input() ngxUniqueCheck: (value: any) => Observable<boolean | null> = (value: any) => of(null);\n\n    constructor() {}\n\n    validate(control: AbstractControl): Promise<ValidationErrors> | Observable<ValidationErrors> {\n        return NgxValidators.uniqueCheckValidator(this.ngxUniqueCheck)(control);\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { NgxFormValidatorDirective } from './directives/form-validator.directive';\nimport { NgxFormSubmitDirective } from './directives/form-submit.directive';\n\n// import { NgxUniqueCheckDirective } from './directives/form-unique-check.directive';\nimport { MaxValidatorDirective, MinValidatorDirective, NgxUniqueCheckDirective } from './directives/validators';\n\nimport { NgxValidatorGlobalConfig, NGX_VALIDATOR_CONFIG } from './validator.class';\n\nconst declarations = [\n    NgxFormValidatorDirective,\n    NgxFormSubmitDirective,\n    NgxUniqueCheckDirective,\n    MaxValidatorDirective,\n    MinValidatorDirective\n];\n\n@NgModule({\n    declarations: declarations,\n    imports: [FormsModule],\n    exports: [...declarations, FormsModule]\n})\nexport class NgxValidatorModule {\n    static forRoot(config: NgxValidatorGlobalConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxValidatorModule,\n            providers: [\n                {\n                    provide: NGX_VALIDATOR_CONFIG,\n                    useValue: config\n                }\n            ]\n        };\n    }\n}\n"],"names":["InjectionToken","Injectable","Optional","Inject","NgForm","FormGroupDirective","Directive","NgZone","Renderer2","ElementRef","ControlContainer","ContentChildren","NgControl","Input","EventEmitter","Output","HostListener","map","of","Validators","NG_VALIDATORS","forwardRef","NG_ASYNC_VALIDATORS","NgModule","FormsModule"],"mappings":"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"}
