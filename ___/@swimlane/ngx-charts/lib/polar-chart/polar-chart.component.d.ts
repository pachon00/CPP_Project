import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class PolarChartComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: boolean;
    yAxis: boolean;
    showXAxisLabel: boolean;
    showYAxisLabel: boolean;
    xAxisLabel: string;
    yAxisLabel: string;
    autoScale: boolean;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    rangeFillOpacity: number;
    trimYAxisTicks: boolean;
    maxYAxisTickLength: number;
    xAxisTickFormatting: (o: any) => any;
    yAxisTickFormatting: (o: any) => any;
    roundDomains: boolean;
    tooltipDisabled: boolean;
    showSeriesOnHover: boolean;
    gradient: boolean;
    yAxisMinScale: number;
    labelTrim: boolean;
    labelTrimSize: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    yAxisDims: ViewDimensions;
    labelOffset: number;
    xDomain: any;
    yDomain: any;
    seriesDomain: any;
    yScale: any;
    xScale: any;
    yAxisScale: any;
    colors: ColorHelper;
    scaleType: string;
    transform: string;
    transformPlot: string;
    transformYAxis: string;
    transformXAxis: string;
    series: any;
    margin: number[];
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    thetaTicks: any[];
    radiusTicks: number[];
    outerRadius: number;
    update(): void;
    setDims(): void;
    setScales(): void;
    setTicks(): void;
    getXValues(): any[];
    getXDomain(values?: any[]): any[];
    getYValues(): any[];
    getYDomain(domain?: any[]): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    onClick(data: any, series?: any): void;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: ColorHelper;
        domain: any;
        title: string;
        position: string;
    } | {
        scaleType: string;
        colors: any;
        domain: any;
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    trackBy(index: any, item: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolarChartComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PolarChartComponent, "ngx-charts-polar-chart", never, {
    "legendTitle": "legendTitle";
    "legendPosition": "legendPosition";
    "showGridLines": "showGridLines";
    "curve": "curve";
    "activeEntries": "activeEntries";
    "rangeFillOpacity": "rangeFillOpacity";
    "trimYAxisTicks": "trimYAxisTicks";
    "maxYAxisTickLength": "maxYAxisTickLength";
    "roundDomains": "roundDomains";
    "tooltipDisabled": "tooltipDisabled";
    "showSeriesOnHover": "showSeriesOnHover";
    "gradient": "gradient";
    "yAxisMinScale": "yAxisMinScale";
    "labelTrim": "labelTrim";
    "labelTrimSize": "labelTrimSize";
    "legend": "legend";
    "xAxis": "xAxis";
    "yAxis": "yAxis";
    "showXAxisLabel": "showXAxisLabel";
    "showYAxisLabel": "showYAxisLabel";
    "xAxisLabel": "xAxisLabel";
    "yAxisLabel": "yAxisLabel";
    "autoScale": "autoScale";
    "schemeType": "schemeType";
    "xAxisTickFormatting": "xAxisTickFormatting";
    "yAxisTickFormatting": "yAxisTickFormatting";
}, {
    "activate": "activate";
    "deactivate": "deactivate";
}, ["tooltipTemplate"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9sYXItY2hhcnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBvbGFyLWNoYXJ0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBGQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZpZXdEaW1lbnNpb25zIH0gZnJvbSAnLi4vY29tbW9uL3ZpZXctZGltZW5zaW9ucy5oZWxwZXInO1xuaW1wb3J0IHsgQ29sb3JIZWxwZXIgfSBmcm9tICcuLi9jb21tb24vY29sb3IuaGVscGVyJztcbmltcG9ydCB7IEJhc2VDaGFydENvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9iYXNlLWNoYXJ0LmNvbXBvbmVudCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb2xhckNoYXJ0Q29tcG9uZW50IGV4dGVuZHMgQmFzZUNoYXJ0Q29tcG9uZW50IHtcbiAgICBsZWdlbmQ6IGJvb2xlYW47XG4gICAgbGVnZW5kVGl0bGU6IHN0cmluZztcbiAgICBsZWdlbmRQb3NpdGlvbjogc3RyaW5nO1xuICAgIHhBeGlzOiBib29sZWFuO1xuICAgIHlBeGlzOiBib29sZWFuO1xuICAgIHNob3dYQXhpc0xhYmVsOiBib29sZWFuO1xuICAgIHNob3dZQXhpc0xhYmVsOiBib29sZWFuO1xuICAgIHhBeGlzTGFiZWw6IHN0cmluZztcbiAgICB5QXhpc0xhYmVsOiBzdHJpbmc7XG4gICAgYXV0b1NjYWxlOiBib29sZWFuO1xuICAgIHNob3dHcmlkTGluZXM6IGJvb2xlYW47XG4gICAgY3VydmU6IGFueTtcbiAgICBhY3RpdmVFbnRyaWVzOiBhbnlbXTtcbiAgICBzY2hlbWVUeXBlOiBzdHJpbmc7XG4gICAgcmFuZ2VGaWxsT3BhY2l0eTogbnVtYmVyO1xuICAgIHRyaW1ZQXhpc1RpY2tzOiBib29sZWFuO1xuICAgIG1heFlBeGlzVGlja0xlbmd0aDogbnVtYmVyO1xuICAgIHhBeGlzVGlja0Zvcm1hdHRpbmc6IChvOiBhbnkpID0+IGFueTtcbiAgICB5QXhpc1RpY2tGb3JtYXR0aW5nOiAobzogYW55KSA9PiBhbnk7XG4gICAgcm91bmREb21haW5zOiBib29sZWFuO1xuICAgIHRvb2x0aXBEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBzaG93U2VyaWVzT25Ib3ZlcjogYm9vbGVhbjtcbiAgICBncmFkaWVudDogYm9vbGVhbjtcbiAgICB5QXhpc01pblNjYWxlOiBudW1iZXI7XG4gICAgbGFiZWxUcmltOiBib29sZWFuO1xuICAgIGxhYmVsVHJpbVNpemU6IG51bWJlcjtcbiAgICBhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZGVhY3RpdmF0ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGRpbXM6IFZpZXdEaW1lbnNpb25zO1xuICAgIHlBeGlzRGltczogVmlld0RpbWVuc2lvbnM7XG4gICAgbGFiZWxPZmZzZXQ6IG51bWJlcjtcbiAgICB4RG9tYWluOiBhbnk7XG4gICAgeURvbWFpbjogYW55O1xuICAgIHNlcmllc0RvbWFpbjogYW55O1xuICAgIHlTY2FsZTogYW55O1xuICAgIHhTY2FsZTogYW55O1xuICAgIHlBeGlzU2NhbGU6IGFueTtcbiAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xuICAgIHNjYWxlVHlwZTogc3RyaW5nO1xuICAgIHRyYW5zZm9ybTogc3RyaW5nO1xuICAgIHRyYW5zZm9ybVBsb3Q6IHN0cmluZztcbiAgICB0cmFuc2Zvcm1ZQXhpczogc3RyaW5nO1xuICAgIHRyYW5zZm9ybVhBeGlzOiBzdHJpbmc7XG4gICAgc2VyaWVzOiBhbnk7XG4gICAgbWFyZ2luOiBudW1iZXJbXTtcbiAgICB4QXhpc0hlaWdodDogbnVtYmVyO1xuICAgIHlBeGlzV2lkdGg6IG51bWJlcjtcbiAgICBmaWx0ZXJlZERvbWFpbjogYW55O1xuICAgIGxlZ2VuZE9wdGlvbnM6IGFueTtcbiAgICB0aGV0YVRpY2tzOiBhbnlbXTtcbiAgICByYWRpdXNUaWNrczogbnVtYmVyW107XG4gICAgb3V0ZXJSYWRpdXM6IG51bWJlcjtcbiAgICB1cGRhdGUoKTogdm9pZDtcbiAgICBzZXREaW1zKCk6IHZvaWQ7XG4gICAgc2V0U2NhbGVzKCk6IHZvaWQ7XG4gICAgc2V0VGlja3MoKTogdm9pZDtcbiAgICBnZXRYVmFsdWVzKCk6IGFueVtdO1xuICAgIGdldFhEb21haW4odmFsdWVzPzogYW55W10pOiBhbnlbXTtcbiAgICBnZXRZVmFsdWVzKCk6IGFueVtdO1xuICAgIGdldFlEb21haW4oZG9tYWluPzogYW55W10pOiBhbnlbXTtcbiAgICBnZXRTZXJpZXNEb21haW4oKTogYW55W107XG4gICAgZ2V0WFNjYWxlKGRvbWFpbjogYW55LCB3aWR0aDogYW55KTogYW55O1xuICAgIGdldFlTY2FsZShkb21haW46IGFueSwgaGVpZ2h0OiBhbnkpOiBhbnk7XG4gICAgb25DbGljayhkYXRhOiBhbnksIHNlcmllcz86IGFueSk6IHZvaWQ7XG4gICAgc2V0Q29sb3JzKCk6IHZvaWQ7XG4gICAgZ2V0TGVnZW5kT3B0aW9ucygpOiB7XG4gICAgICAgIHNjYWxlVHlwZTogc3RyaW5nO1xuICAgICAgICBjb2xvcnM6IENvbG9ySGVscGVyO1xuICAgICAgICBkb21haW46IGFueTtcbiAgICAgICAgdGl0bGU6IHN0cmluZztcbiAgICAgICAgcG9zaXRpb246IHN0cmluZztcbiAgICB9IHwge1xuICAgICAgICBzY2FsZVR5cGU6IHN0cmluZztcbiAgICAgICAgY29sb3JzOiBhbnk7XG4gICAgICAgIGRvbWFpbjogYW55O1xuICAgICAgICB0aXRsZTogYW55O1xuICAgICAgICBwb3NpdGlvbjogc3RyaW5nO1xuICAgIH07XG4gICAgdXBkYXRlWUF4aXNXaWR0aCh7IHdpZHRoIH06IHtcbiAgICAgICAgd2lkdGg6IGFueTtcbiAgICB9KTogdm9pZDtcbiAgICB1cGRhdGVYQXhpc0hlaWdodCh7IGhlaWdodCB9OiB7XG4gICAgICAgIGhlaWdodDogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIG9uQWN0aXZhdGUoaXRlbTogYW55KTogdm9pZDtcbiAgICBvbkRlYWN0aXZhdGUoaXRlbTogYW55KTogdm9pZDtcbiAgICBkZWFjdGl2YXRlQWxsKCk6IHZvaWQ7XG4gICAgdHJhY2tCeShpbmRleDogYW55LCBpdGVtOiBhbnkpOiBhbnk7XG59XG4iXX0=