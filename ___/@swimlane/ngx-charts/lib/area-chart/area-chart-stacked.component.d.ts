import { EventEmitter, TemplateRef } from '@angular/core';
import { ViewDimensions } from '../common/view-dimensions.helper';
import { ColorHelper } from '../common/color.helper';
import { BaseChartComponent } from '../common/base-chart.component';
import * as ɵngcc0 from '@angular/core';
export declare class AreaChartStackedComponent extends BaseChartComponent {
    legend: boolean;
    legendTitle: string;
    legendPosition: string;
    xAxis: any;
    yAxis: any;
    showXAxisLabel: any;
    showYAxisLabel: any;
    xAxisLabel: any;
    yAxisLabel: any;
    timeline: any;
    gradient: any;
    showGridLines: boolean;
    curve: any;
    activeEntries: any[];
    schemeType: string;
    trimXAxisTicks: boolean;
    trimYAxisTicks: boolean;
    rotateXAxisTicks: boolean;
    maxXAxisTickLength: number;
    maxYAxisTickLength: number;
    xAxisTickFormatting: any;
    yAxisTickFormatting: any;
    xAxisTicks: any[];
    yAxisTicks: any[];
    roundDomains: boolean;
    tooltipDisabled: boolean;
    xScaleMin: any;
    xScaleMax: any;
    yScaleMin: number;
    yScaleMax: number;
    activate: EventEmitter<any>;
    deactivate: EventEmitter<any>;
    tooltipTemplate: TemplateRef<any>;
    seriesTooltipTemplate: TemplateRef<any>;
    dims: ViewDimensions;
    scaleType: string;
    xDomain: any[];
    xSet: any[];
    yDomain: any[];
    seriesDomain: any;
    xScale: any;
    yScale: any;
    transform: string;
    clipPathId: string;
    clipPath: string;
    colors: ColorHelper;
    margin: number[];
    hoveredVertical: any;
    xAxisHeight: number;
    yAxisWidth: number;
    filteredDomain: any;
    legendOptions: any;
    timelineWidth: any;
    timelineHeight: number;
    timelineXScale: any;
    timelineYScale: any;
    timelineXDomain: any;
    timelineTransform: any;
    timelinePadding: number;
    update(): void;
    updateTimeline(): void;
    getXDomain(): any[];
    getYDomain(): any[];
    getSeriesDomain(): any[];
    getXScale(domain: any, width: any): any;
    getYScale(domain: any, height: any): any;
    updateDomain(domain: any): void;
    updateHoveredVertical(item: any): void;
    hideCircles(): void;
    onClick(data: any, series?: any): void;
    trackBy(index: any, item: any): string;
    setColors(): void;
    getLegendOptions(): {
        scaleType: string;
        colors: any;
        domain: any[];
        title: any;
        position: string;
    };
    updateYAxisWidth({ width }: {
        width: any;
    }): void;
    updateXAxisHeight({ height }: {
        height: any;
    }): void;
    onActivate(item: any): void;
    onDeactivate(item: any): void;
    deactivateAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AreaChartStackedComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AreaChartStackedComponent, "ngx-charts-area-chart-stacked", never, {
    "legend": "legend";
    "legendTitle": "legendTitle";
    "legendPosition": "legendPosition";
    "showGridLines": "showGridLines";
    "curve": "curve";
    "activeEntries": "activeEntries";
    "trimXAxisTicks": "trimXAxisTicks";
    "trimYAxisTicks": "trimYAxisTicks";
    "rotateXAxisTicks": "rotateXAxisTicks";
    "maxXAxisTickLength": "maxXAxisTickLength";
    "maxYAxisTickLength": "maxYAxisTickLength";
    "roundDomains": "roundDomains";
    "tooltipDisabled": "tooltipDisabled";
    "xAxis": "xAxis";
    "yAxis": "yAxis";
    "showXAxisLabel": "showXAxisLabel";
    "showYAxisLabel": "showYAxisLabel";
    "xAxisLabel": "xAxisLabel";
    "yAxisLabel": "yAxisLabel";
    "timeline": "timeline";
    "gradient": "gradient";
    "schemeType": "schemeType";
    "xAxisTickFormatting": "xAxisTickFormatting";
    "yAxisTickFormatting": "yAxisTickFormatting";
    "xAxisTicks": "xAxisTicks";
    "yAxisTicks": "yAxisTicks";
    "xScaleMin": "xScaleMin";
    "xScaleMax": "xScaleMax";
    "yScaleMin": "yScaleMin";
    "yScaleMax": "yScaleMax";
}, {
    "activate": "activate";
    "deactivate": "deactivate";
}, ["tooltipTemplate", "seriesTooltipTemplate"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS1jaGFydC1zdGFja2VkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhcmVhLWNoYXJ0LXN0YWNrZWQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUZBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVmlld0RpbWVuc2lvbnMgfSBmcm9tICcuLi9jb21tb24vdmlldy1kaW1lbnNpb25zLmhlbHBlcic7XG5pbXBvcnQgeyBDb2xvckhlbHBlciB9IGZyb20gJy4uL2NvbW1vbi9jb2xvci5oZWxwZXInO1xuaW1wb3J0IHsgQmFzZUNoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi4vY29tbW9uL2Jhc2UtY2hhcnQuY29tcG9uZW50JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFyZWFDaGFydFN0YWNrZWRDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ2hhcnRDb21wb25lbnQge1xuICAgIGxlZ2VuZDogYm9vbGVhbjtcbiAgICBsZWdlbmRUaXRsZTogc3RyaW5nO1xuICAgIGxlZ2VuZFBvc2l0aW9uOiBzdHJpbmc7XG4gICAgeEF4aXM6IGFueTtcbiAgICB5QXhpczogYW55O1xuICAgIHNob3dYQXhpc0xhYmVsOiBhbnk7XG4gICAgc2hvd1lBeGlzTGFiZWw6IGFueTtcbiAgICB4QXhpc0xhYmVsOiBhbnk7XG4gICAgeUF4aXNMYWJlbDogYW55O1xuICAgIHRpbWVsaW5lOiBhbnk7XG4gICAgZ3JhZGllbnQ6IGFueTtcbiAgICBzaG93R3JpZExpbmVzOiBib29sZWFuO1xuICAgIGN1cnZlOiBhbnk7XG4gICAgYWN0aXZlRW50cmllczogYW55W107XG4gICAgc2NoZW1lVHlwZTogc3RyaW5nO1xuICAgIHRyaW1YQXhpc1RpY2tzOiBib29sZWFuO1xuICAgIHRyaW1ZQXhpc1RpY2tzOiBib29sZWFuO1xuICAgIHJvdGF0ZVhBeGlzVGlja3M6IGJvb2xlYW47XG4gICAgbWF4WEF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XG4gICAgbWF4WUF4aXNUaWNrTGVuZ3RoOiBudW1iZXI7XG4gICAgeEF4aXNUaWNrRm9ybWF0dGluZzogYW55O1xuICAgIHlBeGlzVGlja0Zvcm1hdHRpbmc6IGFueTtcbiAgICB4QXhpc1RpY2tzOiBhbnlbXTtcbiAgICB5QXhpc1RpY2tzOiBhbnlbXTtcbiAgICByb3VuZERvbWFpbnM6IGJvb2xlYW47XG4gICAgdG9vbHRpcERpc2FibGVkOiBib29sZWFuO1xuICAgIHhTY2FsZU1pbjogYW55O1xuICAgIHhTY2FsZU1heDogYW55O1xuICAgIHlTY2FsZU1pbjogbnVtYmVyO1xuICAgIHlTY2FsZU1heDogbnVtYmVyO1xuICAgIGFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBkZWFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB0b29sdGlwVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgc2VyaWVzVG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGRpbXM6IFZpZXdEaW1lbnNpb25zO1xuICAgIHNjYWxlVHlwZTogc3RyaW5nO1xuICAgIHhEb21haW46IGFueVtdO1xuICAgIHhTZXQ6IGFueVtdO1xuICAgIHlEb21haW46IGFueVtdO1xuICAgIHNlcmllc0RvbWFpbjogYW55O1xuICAgIHhTY2FsZTogYW55O1xuICAgIHlTY2FsZTogYW55O1xuICAgIHRyYW5zZm9ybTogc3RyaW5nO1xuICAgIGNsaXBQYXRoSWQ6IHN0cmluZztcbiAgICBjbGlwUGF0aDogc3RyaW5nO1xuICAgIGNvbG9yczogQ29sb3JIZWxwZXI7XG4gICAgbWFyZ2luOiBudW1iZXJbXTtcbiAgICBob3ZlcmVkVmVydGljYWw6IGFueTtcbiAgICB4QXhpc0hlaWdodDogbnVtYmVyO1xuICAgIHlBeGlzV2lkdGg6IG51bWJlcjtcbiAgICBmaWx0ZXJlZERvbWFpbjogYW55O1xuICAgIGxlZ2VuZE9wdGlvbnM6IGFueTtcbiAgICB0aW1lbGluZVdpZHRoOiBhbnk7XG4gICAgdGltZWxpbmVIZWlnaHQ6IG51bWJlcjtcbiAgICB0aW1lbGluZVhTY2FsZTogYW55O1xuICAgIHRpbWVsaW5lWVNjYWxlOiBhbnk7XG4gICAgdGltZWxpbmVYRG9tYWluOiBhbnk7XG4gICAgdGltZWxpbmVUcmFuc2Zvcm06IGFueTtcbiAgICB0aW1lbGluZVBhZGRpbmc6IG51bWJlcjtcbiAgICB1cGRhdGUoKTogdm9pZDtcbiAgICB1cGRhdGVUaW1lbGluZSgpOiB2b2lkO1xuICAgIGdldFhEb21haW4oKTogYW55W107XG4gICAgZ2V0WURvbWFpbigpOiBhbnlbXTtcbiAgICBnZXRTZXJpZXNEb21haW4oKTogYW55W107XG4gICAgZ2V0WFNjYWxlKGRvbWFpbjogYW55LCB3aWR0aDogYW55KTogYW55O1xuICAgIGdldFlTY2FsZShkb21haW46IGFueSwgaGVpZ2h0OiBhbnkpOiBhbnk7XG4gICAgdXBkYXRlRG9tYWluKGRvbWFpbjogYW55KTogdm9pZDtcbiAgICB1cGRhdGVIb3ZlcmVkVmVydGljYWwoaXRlbTogYW55KTogdm9pZDtcbiAgICBoaWRlQ2lyY2xlcygpOiB2b2lkO1xuICAgIG9uQ2xpY2soZGF0YTogYW55LCBzZXJpZXM/OiBhbnkpOiB2b2lkO1xuICAgIHRyYWNrQnkoaW5kZXg6IGFueSwgaXRlbTogYW55KTogc3RyaW5nO1xuICAgIHNldENvbG9ycygpOiB2b2lkO1xuICAgIGdldExlZ2VuZE9wdGlvbnMoKToge1xuICAgICAgICBzY2FsZVR5cGU6IHN0cmluZztcbiAgICAgICAgY29sb3JzOiBhbnk7XG4gICAgICAgIGRvbWFpbjogYW55W107XG4gICAgICAgIHRpdGxlOiBhbnk7XG4gICAgICAgIHBvc2l0aW9uOiBzdHJpbmc7XG4gICAgfTtcbiAgICB1cGRhdGVZQXhpc1dpZHRoKHsgd2lkdGggfToge1xuICAgICAgICB3aWR0aDogYW55O1xuICAgIH0pOiB2b2lkO1xuICAgIHVwZGF0ZVhBeGlzSGVpZ2h0KHsgaGVpZ2h0IH06IHtcbiAgICAgICAgaGVpZ2h0OiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgb25BY3RpdmF0ZShpdGVtOiBhbnkpOiB2b2lkO1xuICAgIG9uRGVhY3RpdmF0ZShpdGVtOiBhbnkpOiB2b2lkO1xuICAgIGRlYWN0aXZhdGVBbGwoKTogdm9pZDtcbn1cbiJdfQ==