{"version":3,"file":"angular2TextMask.js","sources":["../src/angular2TextMask.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, forwardRef, Input, Inject, NgModule, OnChanges, Optional, Provider, Renderer2, SimpleChanges } from '@angular/core'\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms'\nimport {ÉµgetDOM as getDOM} from '@angular/platform-browser'\nimport { createTextMaskInputElement } from 'text-mask-core/dist/textMaskCore'\n\nexport class TextMaskConfig {\n  mask: Array<string | RegExp> | ((raw: string) => Array<string | RegExp>) | false\n  guide?: boolean\n  placeholderChar?: string\n  pipe?: (conformedValue: string, config: TextMaskConfig) => false | string | object\n  keepCharPositions?: boolean\n  showMask?: boolean\n}\n\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MaskedInputDirective),\n  multi: true\n}\n\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n */\nfunction _isAndroid(): boolean {\n  const userAgent = getDOM() ? getDOM().getUserAgent() : ''\n  return /android (\\d+)/.test(userAgent.toLowerCase())\n}\n\n@Directive({\n  host: {\n    '(input)': '_handleInput($event.target.value)',\n    '(blur)': 'onTouched()',\n    '(compositionstart)': '_compositionStart()',\n    '(compositionend)': '_compositionEnd($event.target.value)'\n  },\n  selector: '[textMask]',\n  exportAs: 'textMask',\n  providers: [MASKEDINPUT_VALUE_ACCESSOR]\n})\nexport class MaskedInputDirective implements ControlValueAccessor, OnChanges {\n  @Input('textMask') textMaskConfig: TextMaskConfig = {\n    mask: [],\n    guide: true,\n    placeholderChar: '_',\n    pipe: undefined,\n    keepCharPositions: false,\n  }\n\n  onChange = (_: any) => {}\n  onTouched = () => {}\n\n  private textMaskInputElement: any\n  private inputElement: HTMLInputElement\n\n  /** Whether the user is creating a composition string (IME events). */\n  private _composing = false\n\n  constructor(\n    private _renderer: Renderer2,\n    private _elementRef: ElementRef,\n    @Optional() @Inject(COMPOSITION_BUFFER_MODE)private _compositionMode: boolean\n  ) {\n    if (this._compositionMode == null) {\n      this._compositionMode = !_isAndroid()\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._setupMask(true)\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(this.inputElement.value)\n    }\n  }\n\n  writeValue(value: any) {\n    this._setupMask()\n\n    // set the initial value for cases where the mask is disabled\n    const normalizedValue = value == null ? '' : value\n    this._renderer.setProperty(this.inputElement, 'value', normalizedValue)\n\n    if (this.textMaskInputElement !== undefined) {\n      this.textMaskInputElement.update(value)\n    }\n  }\n\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\n\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled)\n  }\n\n  \n  _handleInput(value) {\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n      this._setupMask()\n\n      if (this.textMaskInputElement !== undefined) {\n        this.textMaskInputElement.update(value)\n        \n        // get the updated value\n        value = this.inputElement.value\n        this.onChange(value)\n      }\n    }\n  }\n\n  _setupMask(create = false) {\n    if (!this.inputElement) {\n      if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {\n        // `textMask` directive is used directly on an input element\n        this.inputElement = this._elementRef.nativeElement\n      } else {\n        // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n        this.inputElement = this._elementRef.nativeElement.getElementsByTagName('INPUT')[0]\n      }\n    }\n    \n    if (this.inputElement && create) {\n      this.textMaskInputElement = createTextMaskInputElement(\n        Object.assign({inputElement: this.inputElement}, this.textMaskConfig)\n      )\n    }\n    \n  }\n\n  _compositionStart(): void { this._composing = true }\n\n  _compositionEnd(value: any): void {\n    this._composing = false\n    this._compositionMode && this._handleInput(value)\n  }\n}\n\n@NgModule({\n  declarations: [MaskedInputDirective],\n  exports: [MaskedInputDirective]\n})\nexport class TextMaskModule {}\n\nexport { conformToMask } from 'text-mask-core/dist/textMaskCore'\n"]}